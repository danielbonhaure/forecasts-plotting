
##################################################################
##                           README                             ##
##################################################################
## Este Dockerfile permite crear un contendor con RStudio (co-  ##
## rriendo en modo WEB), con todos los paquetes necesarios para ##
## levantar un ambiente de desarrollo.                          ##
##################################################################



###########################
## Set GLOBAL BUILD ARGS ##
###########################

# Set R version
ARG R_VERSION="4.2"

# Set user name and id
ARG USR_NAME="nonroot"
ARG USER_UID="1001"  # el usuario rstudio ya tiene el UID 1000

# Set group name and id
ARG GRP_NAME="nonroot"
ARG USER_GID="1001"  # el grupo rstudio ya tiene el GID 1000

# Set users passwords
ARG ROOT_PWD="root"
ARG USER_PWD=$USR_NAME



#################################
## Stage 1: Install R packages ##
#################################


# Create image
FROM rocker/rstudio:${R_VERSION} AS r_builder

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to install ncdf4  (R)
        libnetcdf-dev \
        # to install anomalize (R)
        libcurl4-openssl-dev libssl-dev \
        # to install data.tabla (R)
        libz-dev \
        # to install RPostgres (R)
        libpq-dev \
        # to install sf (R)
        libgdal-dev \
        # to install units, a dependency of sf (R)
        libudunits2-dev && \
    rm -rf /var/lib/apt/lists/*

# set CRAN mirror
ARG CRAN_MIRROR="getOption('repos')"

# Install R packages
RUN R -e "options(warn=2); install.packages('ncdf4', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('dplyr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tibble', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('sf', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('stringr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('stringi', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tidyr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('purrr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('yaml', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('glue', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('lubridate', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('htmltools', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leafem', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rnaturalearth', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('R6', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('forcats', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tidync', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('metR', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('logger', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('htmlwidgets', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('here', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('gstat', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('automap', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet.extras2', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('RCurl', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('optparse', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"



##############################################
## Stage 2: Copy the R installation folders ##
##############################################

# Create image
FROM rocker/rstudio:${R_VERSION} AS r_final

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to install ncdf4  (R)
        libnetcdf-dev \
        # to install anomalize (R)
        libcurl4-openssl-dev libssl-dev \
        # to install data.tabla (R)
        libz-dev \
        # to install RPostgres (R)
        libpq-dev \
        # to install sf (R)
        libgdal-dev \
        # to install units, a dependency of sf (R)
        libudunits2-dev && \
    rm -rf /var/lib/apt/lists/*

# Install R packages from r_builder
# https://forums.docker.com/t/using-multi-stage-docker-build-for-slimming-down-images-with-r-dependency/67967
RUN mkdir -p /usr/local/lib/R \
             /usr/local/lib/R/site-library
COPY --from=r_builder /usr/local/bin/R /usr/local/bin/R
COPY --from=r_builder /usr/local/bin/Rscript /usr/local/bin/Rscript
COPY --from=r_builder /usr/local/lib/R /usr/local/lib/R
COPY --from=r_builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library
COPY --from=r_builder /tmp /tmp

# Set R libs paths (see: https://stat.ethz.ch/R-manual/R-devel/library/base/html/libPaths.html)
ENV R_LIBS="/usr/local/lib/R/library"
ENV R_LIBS_USER="/usr/local/lib/R/site-library"
ENV R_LIBS_SITE="/usr/local/lib/R/site-library"



#############################################
## Stage 3: Create and Setup rstudio image ##
#############################################

# Create image
FROM r_final AS rstudio_builder

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # Management packages
        git htop vim iputils-ping iproute2

# Run the S6 Overlay INIT, para entender porque ENTRYPOINT [ "/init" ], ver:
# https://github.com/just-containers/s6-overlay, aunque rocker/rstudio usa CMD, ver:
# https://github.com/rocker-org/rocker-versioned2/blob/master/dockerfiles/rstudio_4.1.2.Dockerfile
ENTRYPOINT [ "/init" ]



###################################
## Stage 4: Create non-root user ##
###################################

# Create image
FROM rstudio_builder AS rstudio_nonroot_builder

# Renew USER args
ARG USR_NAME
ARG USER_UID
ARG GRP_NAME
ARG USER_GID
ARG ROOT_PWD
ARG USER_PWD

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to run sudo
        sudo && \
    rm -rf /var/lib/apt/lists/*

# Modify root password
RUN echo "root:$ROOT_PWD" | chpasswd

# Create a non-root user, so the container can run as non-root
# OBS: the UID and GID must be the same as the user that own the
# input and the output volumes, so there isn't perms problems!!
# Se recomienda crear usuarios en el contendor de esta manera,
# ver: https://nickjanetakis.com/blog/running-docker-containers-as-a-non-root-user-with-a-custom-uid-and-gid
# Se agregar --no-log-init para prevenir un problema de seguridad,
# ver: https://jtreminio.com/blog/running-docker-containers-as-current-host-user/
RUN groupadd --gid $USER_GID $GRP_NAME
RUN useradd --no-log-init --uid $USER_UID --gid $USER_GID --shell /bin/bash \
    --comment "Non-root User Account" --create-home $USR_NAME

# Modify the password of non-root user
RUN echo "$USR_NAME:$USER_PWD" | chpasswd

# Add non-root user to sudoers and to adm group
# The adm group was added to allow non-root user to see logs
RUN usermod -aG sudo $USR_NAME && \
    usermod -aG adm $USR_NAME

# To allow sudo without password
# RUN echo "$USR_NAME ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/$USR_NAME && \
#     chmod 0440 /etc/sudoers.d/$USR_NAME



########################################
## Stage 5: Setup final rstudio image ##
########################################

# Create image
FROM rstudio_nonroot_builder

# Run the S6 Overlay INIT, para entender porque ENTRYPOINT [ "/init" ], ver:
# https://github.com/just-containers/s6-overlay, aunque rocker/rstudio usa CMD, ver:
# https://github.com/rocker-org/rocker-versioned2/blob/master/dockerfiles/rstudio_4.1.2.Dockerfile
ENTRYPOINT [ "/init" ]

# Resulta que la imagen rocker/rstudio usa s6-overlay, y como se explica aquí:
# https://github.com/rocker-org/shiny/issues/79#issuecomment-633067470
# el "process supervisor" s6-overlay debe correr como root. Sin embargo
# se modificó la imagen para que rstudio corra siempre como no root
USER root

# AUTHORIZATION
# Al acceder a RStudio se solicita usuario y contraseña, las opciones válidas
# son dos: 1- usuario "rstudio", con la clave que se imprime en el log; y
# 2- usuario non-root creado y la contraseña definida para ese usuario.



#####################################################
## Usage: Commands to Build and Run this container ##
#####################################################


# Build container
#
# docker build \
#  --file Dockerfile.rstudio \
#  --tag plotter-rstudio:latest .

# Run container
#
# docker run -ti --rm \
#  --name plotter-rstudio \
#  --env PASSWORD=rstudio \
#  --volume $(pwd):/home/rstudio/forecasts-plotting \
#  --workdir /home/rstudio/forecasts-plotting \
#  --publish 127.0.0.1:8787:8787 \
#  --detach plotter-rstudio:latest

# In a Web Browser, go to http://localhost:8787/


